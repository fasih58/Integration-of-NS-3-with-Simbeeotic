<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2012, The President and Fellows of Harvard College.
    All Rights Reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. Neither the name of the University nor the names of its contributors
        may be used to endorse or promote products derived from this software
        without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE UNIVERSITY OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.

-->

<!-- a schema that describes the scenario document -->
<xs:schema targetNamespace="http://harvard/robobees/simbeeotic/configuration/scenario"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:scenario="http://harvard/robobees/simbeeotic/configuration/scenario"
           elementFormDefault="qualified">

    <xs:element name="scenario" type="scenario:Scenario">
        <xs:annotation>
            <xs:documentation>Global root element.</xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="Scenario">
        <xs:annotation>
            <xs:documentation>
                Scenario container, defines model configs, looping structure, and termination criteria.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
            <xs:element name="master-seed" type="scenario:MasterSeed" minOccurs="0" maxOccurs="1"/>
            <xs:element name="simulation" type="scenario:Simulation" minOccurs="1" maxOccurs="1"/>
            <xs:element name="models" type="scenario:Models" minOccurs="1" maxOccurs="1"/>
            <xs:element name="components" type="scenario:Components" minOccurs="0" maxOccurs="1"/>
            <xs:element name="looping" type="scenario:Looping" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="MasterSeed">
        <xs:choice>
            <xs:element name="constant" type="scenario:ConstantMasterSeed"/>
            <xs:element name="variable" type="scenario:VariableMasterSeed"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="ConstantMasterSeed">
        <xs:annotation>
            <xs:documentation>
                Sets the master seed to a constant value. This value will be used as the seed
                for the random number generator that generates seeds for looping variables and
                for model random number streams. This is often used when there is parametric
                looping of the scenario through the use of looping variables.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="value" type="xs:int" use="required"/>
    </xs:complexType>

    <xs:complexType name="VariableMasterSeed">
        <xs:annotation>
            <xs:documentation>
                Sets the master seed to a variable value. The values generated by this variable
                will be used as seeds for the random number generator that
                generates seeds for looping variables and for model random number streams. This
                is often used as an "outer loop" to vary the set of looping variables. A common
                use is in Monte Carlo analysis to vary the run-to-run values of single draw random
                looping variables.
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="uniform-random" type="scenario:UniformRandomLoopingVariable"/>
            <xs:element name="normal-random" type="scenario:NormalRandomLoopingVariable"/>
            <xs:element name="for" type="scenario:ForLoopingVariable"/>
            <xs:element name="each" type="scenario:EachLoopingVariable"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="Simulation">
        <xs:sequence>
            <xs:element name="end-time" type="xs:double" minOccurs="1" maxOccurs="1" default="1200.0"/>
            <xs:element name="epoch" type="xs:long" minOccurs="0" maxOccurs="1" default="28800000"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Models">
        <xs:sequence>
            <xs:element name="model" type="scenario:ModelConfig" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ModelConfig">
        <xs:complexContent>
            <xs:extension base="scenario:CustomClass">
                <xs:sequence>
                    <xs:element name="model" type="scenario:ModelConfig" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="sensor" type="scenario:SensorConfig" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="radio" type="scenario:RadioConfig" minOccurs="0" maxOccurs="1"/>
                    <!--maxOccurs="unbounded" ???-->
                    <xs:element name="ns" type="scenario:NSConfig" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="start-position" type="scenario:Vector" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:attribute name="count" type="xs:int" use="optional" default="1"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="SensorConfig">
        <xs:complexContent>
            <xs:extension base="scenario:CustomClass">
                <xs:sequence>
                    <xs:element name="offset" type="scenario:Vector" minOccurs="0" maxOccurs="1"/>
                    <xs:element name="pointing" type="scenario:Vector" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="RadioConfig">
        <xs:complexContent>
            <xs:extension base="scenario:CustomClass">
                <xs:sequence>
                    <xs:element name="antenna-pattern" type="scenario:CustomClass" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="NSConfig">
        <xs:complexContent>
            <xs:extension base="scenario:CustomClass">
                <xs:sequence>
                    <!--Get a better name instead of Packet-->
                    <!--<xs:element name="packets" type="scenario:Packets" minOccurs="0" maxOccurs="1"/>-->
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Components">
        <xs:sequence>
            <xs:element name="variation" type="scenario:CustomClass" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!--<xs:complexType name="Packets">-->
        <!--<xs:sequence>-->
            <!--<xs:element name="packet" type="scenario:Packet" minOccurs="0" maxOccurs="unbounded"/>-->
        <!--</xs:sequence>-->
    <!--</xs:complexType>-->

    <!--<xs:complexType name="Packet">-->
        <!--&lt;!&ndash;<xs:choice>&ndash;&gt;-->
        <!--<xs:attribute name="type" type="xs:string" use="required"/>-->
        <!--<xs:attribute name="from" type="xs:string" use="required"/>-->
        <!--<xs:attribute name="to" type="xs:string" use="required"/>-->
        <!--&lt;!&ndash;<xs:attribute name="s" type="xs:int" use="required"/>&ndash;&gt;-->
        <!--<xs:attribute name="ms" type="xs:int" use="required"/>-->
    <!--</xs:complexType>-->

    <xs:complexType name="Vector">
        <xs:attribute name="x" type="xs:float" use="required"/>
        <xs:attribute name="y" type="xs:float" use="required"/>
        <xs:attribute name="z" type="xs:float" use="required"/>
    </xs:complexType>

    <xs:complexType name="CustomClass">
        <xs:sequence>
            <xs:element name="java-class" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element name="properties" type="scenario:ConfigProps" minOccurs="0" maxOccurs="1"/>
            <xs:element name="custom-config" type="scenario:CustomConfig" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional" default=""/>
    </xs:complexType>

    <xs:complexType name="ConfigProps">
        <xs:sequence>
            <xs:element name="prop" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:attribute name="name" type="xs:string" use="required"/>
                    <xs:attribute name="value" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CustomConfig">
        <xs:choice>
            <xs:any processContents="skip"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="Looping">
        <xs:annotation>
            <xs:documentation>The looping definition for the scenario execution.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="variables" type="scenario:Variables" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Variables">
        <xs:annotation>
            <xs:documentation>A set of variables that can control the number of iterations in the execution, and provide some fluctuation in the input parameter set of the components. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="variable" type="scenario:Variable" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Variable">
        <xs:annotation>
            <xs:documentation>Choice for selecting variable type. Variables must be of a known type and have a unique name. </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="constant" type="scenario:ConstantLoopingVariable"/>
            <xs:element name="uniform-random" type="scenario:UniformRandomLoopingVariable"/>
            <xs:element name="normal-random" type="scenario:NormalRandomLoopingVariable"/>
            <xs:element name="for" type="scenario:ForLoopingVariable"/>
            <xs:element name="each" type="scenario:EachLoopingVariable"/>
        </xs:choice>
        <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="ConstantLoopingVariable">
        <xs:annotation>
            <xs:documentation>A variable that does not change. The 'value' can be a reference to the 'name' of another variable.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="value" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="RandomLoopingVariable" abstract="true">
        <xs:annotation>
            <xs:documentation>This is an absract base type for Randome looping variables.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="from" type="xs:string" use="optional"/>
        <xs:attribute name="to" type="xs:string" use="optional"/>
        <xs:attribute name="num-draws" type="xs:string" use="optional" default="1"/>
        <xs:attribute name="seed" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    This attribute allows the user to determine the seed for the looping variable.  This parameter is required
                    when the seed-source attribute is set to USER and is ignored in all other cases.  It may either be an
                    integer literal (up to 64-bits wide) or a variable reference.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="seed-source" default="DEFAULT" type="scenario:SeedSource">
            <xs:annotation>
                <xs:documentation>
                    This attribute is used to determine the source of the seed for the random number generator backing
                    this looping variable.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="first-draw" type="xs:string" use="optional" default="1">
            <xs:annotation><xs:documentation>
                Indicates which draw to be used first.  For instance, a value of 20 with num-draws=5 would cause the 20th, 21st, 22nd, 23rd and 24th random values to be chosen. One based indexing is used.
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="SeedSource">
        <xs:restriction base="xs:string">
            <xs:enumeration value="DEFAULT">
                <xs:annotation>
                    <xs:documentation>
                        If the see source is not specified or if the DEFAULT value is specified, the seed will be set
                        the the default value of 1.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="USER">
                <xs:annotation>
                    <xs:documentation>
                        Sepcifying a seed-source of USER will casue this random variable to be seeded by the specified
                        user seed value.  The seed attribute becomes required when USER is specified.
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RANDOM_STREAM">
                <xs:annotation>
                    <xs:documentation>
                        Specifying a seed-source of RANDOM_STREAM will cause the seed to be drawn from a random stream
                        internal to the framework.  That stream is seeded by the master seed for the scenario.  Specifying
                        RANDOM_STREAM guarentees that multiple looping variables in the same scenario will be independant
                        from one-another and repeatable for a given run (as long as the master seed remains unchanged).
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="UniformRandomLoopingVariable">
        <xs:annotation>
            <xs:documentation>A varible that uses a random number generator to choose a value uniformally over a given
                range specified by from and to attributes. Any of the attributes can be a reference to the 'name' of another
                variable. otherwise, the 'seed' should be a long, the 'num-draws' should be an int, 'from' and 'to' are
                parsed doubles. </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:restriction base="scenario:RandomLoopingVariable">
                <xs:attribute name="from" type="xs:string" use="required"/>
                <xs:attribute name="to" type="xs:string" use="required"/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="NormalRandomLoopingVariable">
        <xs:annotation>
            <xs:documentation>A varible that uses a random number generator to choose a value uniformally over a given range. any of the attributes can be a reference the 'name' of another variable. Otherwise,  'seed' should be a long, 'num-draws' should be an int, and the 'mean'  and 'std-dev' attributes are parsed as a double. </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="scenario:RandomLoopingVariable">
                <xs:attribute name="mean" type="xs:string" use="required"/>
                <xs:attribute name="std-dev" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="EachLoopingVariable">
        <xs:annotation>
            <xs:documentation>A variable that picks each value from a given set of inputs. Any of the 'value' child elements can contain a reference to another variable's 'name'. The input values can be specified inline or
                read from a resource URI.</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:sequence>
                <xs:element name="value" type="xs:string" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:choice>

        <xs:attribute name="first-draw" type="xs:string" use="optional" default="1">
            <xs:annotation><xs:documentation>
                Indicates which draw to be used first.  For instance, a value of 20 with num-draws=5 would cause the 20th, 21st, 22nd, 23rd and 24th random values to be chosen.
            </xs:documentation></xs:annotation>
        </xs:attribute>

        <xs:attribute name="num-draws" type="xs:string" use="optional" default="-1">
            <xs:annotation><xs:documentation>
                Indicates how many of the enumerated values, starting from the first-draw value shall be looped over.  By default all values will be included (-1).
            </xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ForLoopingVariable">
        <xs:annotation>
            <xs:documentation>A variable that loops over a defined range of values. Each attribute can contain a reference to the 'name' attribute of another variable. otherwise, 'from', 'to', and 'step' are parsed as doubles. </xs:documentation>
        </xs:annotation>
        <xs:attribute name="from" type="xs:string" use="required"/>
        <xs:attribute name="to" type="xs:string" use="required"/>
        <xs:attribute name="step" type="xs:string" use="optional" default="1"/>
    </xs:complexType>

</xs:schema>
